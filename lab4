#include <dos.h>
#include <stdio.h>

#define time 80
#define COUNT 22

#define F5 698
#define B5 988
#define Gd5 831

#define C6 1047
#define Cd6 1109
#define Dd6 1245



//channel must be 0, 1 or 2 only
int getState(int channel)
{
	outp(0x43, 0xE0 + (2 << channel));	//11(RBC mode: read channel mode) 1(not save CE - current state of counter) 0(read value of channel) number_of_channel 0
	return inp(0x40 + channel);	//byte, readed from port
}

void printStateWords()
{
	printf("\n\nStatus word: \n");
	char stateWord[8];
	int Channel, state;
	int ports[] = { 0x40, 0x41, 0x42 };
	int controlWords[] = { 226, 228, 232 }; //command words,
	//acording to the rules

	for (Channel = 0; Channel < 3; Channel++)
	{
		outp(0x43, controlWords[Channel]);
		state = inp(ports[Channel]); //read state

		for (int i = 7; i >= 0; i--)
		{
			stateWord[i] = state % 2 + '0';
			state /= 2;
		}
		printf("Channel %d: ", Channel);
		for (i = 0; i < 8; i++)
		{
			printf("%c", stateWord[i]);
		}
		printf("\n");
	}
}

unsigned int getCE(int channel)
{
	int state;
	int delim;
	int port = 0x40;
	state = getState(channel);
	outp(0x43, (state & 0x0F) | (channel << 6));			//(state & 0x0F) => SC (channel number) = 0, RW = 0 (get CE); than add channel number
	outp(0x43, (state & 0x3F) | (channel << 6) | 0x30);			//(state & 0x3F) => SC = 0; ... | 0x30 => RW = 11 (first lower part)
	state = inp(port + channel);
	delim = inp(port + channel);
	delim <<= 8;
	delim += state;
	return delim;
}

void printDelims() {
	int iChannel;
	long j;
	long kd_low, kd_high, kd, kd_max;

	for (iChannel = 0; iChannel < 3; iChannel++) {
		kd_max = 0;
		for (j = 0; j < 65535; j++) {
			switch (iChannel) {
			case 0: {
						outp(0x43, 0x0);
						kd_low = inp(0x40);
						kd_high = inp(0x40);
						kd = kd_high * 256 + kd_low;
						break;
			}
			case 1: {
						outp(0x43, 0x40);
						kd_low = inp(0x41);
						kd_high = inp(0x41);
						kd = kd_high * 256 + kd_low;
						break;
			}
			case 2: {
						outp(0x43, 0x80);
						kd_low = inp(0x42);
						kd_high = inp(0x42);
						kd = kd_high * 256 + kd_low;
						break;
			}
			}
			if (kd_max < kd) {
				kd_max = kd;
			}
		}
		switch (iChannel) {
		case 0: {
					printf("Channel 0x40 kd: %ld\n", kd_max);
					break;
		}
		case 1: {
					printf("Channel 0x41 kd: %ld\n", kd_max);
					break;
		}
		case 2: {
					printf("Channel 0x42 kd: %ld\n", kd_max);
					break;
		}
		}
	}
	return;
}


void newrandom()
{
	int delim = 0;
	int speakerWasOn = 0;
	
	long maxNum = 0;

	printf("Input max random number, please\n");
	scanf("%u", &maxNum);
	
		//
		//clear buffer
		while (getchar() != '\n');

		//clear buffer

		if (maxNum > 0){
			outp(0x43, 0xB4);						//10(channel 2) 11(RW lower, than higher) 010(mode 2: with autoloading) 0 (binary)
			outp(0x42, maxNum % 256);
			outp(0x42, maxNum / 256);

			//включаем только канал
			delim = inp(0x61);
			speakerWasOn = delim & 0x01;
			outp(0x61, delim | 0x01);

			printf("Press Enter go generate number\n");
			getchar();

			printf("Your number is: %u", getCE(2));

			//выключаем только канал, если нужно
			delim = inp(0x61);
			speakerWasOn |= 0xFFFE;									//все биты, кроме последнего

			outp(0x61, delim & speakerWasOn);
		}
		else printf("wrong num\n");
	
}

void SoundGeneration() {

	int frequency[COUNT] = { F5, C6, B5, C6, B5, C6, B5, C6, Gd5, F5, F5, Gd5, C6, Cd6, Gd5, Cd6, Dd6, C6, Cd6, C6, Cd6, C6 };

	int durability[COUNT] = { time, time, time, time, time, time, time, time, time, time, time, time, time, time, time, time, time, time, time, time, time, time };
	int delayCounter[COUNT] = { 5 * time, time, 0, 0, 0, 0, time, time, 3 * time, 5 * time, time, time, time, 3 * time, 3 * time, 3 * time, 3 * time, time, time, time, time, 0 };
	long unsigned base = 1193180;
	int frequencyCounter;
	int divisionCoefficient;

	for (frequencyCounter = 0; frequencyCounter < COUNT; frequencyCounter++)
	{
		outp(0x43, 0xB6);
		divisionCoefficient = base / frequency[frequencyCounter];
		outp(0x42, divisionCoefficient % 256); //Low
		divisionCoefficient /= 256; //Pause
		outp(0x42, divisionCoefficient); //High
		outp(0x61, inp(0x61) | 3); //Turn on
		delay(durability[frequencyCounter]); //Wait
		outp(0x61, inp(0x61) & 0xFC); //Turn off
		delay(delayCounter[frequencyCounter]); //Delay
	}
}

void Menu(void) {
	printf("\n1. Play sound");
	printf("\n2. Print channels kd");
	printf("\n3. Print state words");
	printf("\n4. Get random digit");
	printf("\n5. Exit.");
	printf("\n\nEnter choice: ");
	return;
}

void MenuChoice(int *number) {
	for (;;) {
		while (scanf("%d", number) != 1) {
			printf("\nIncorrect input. Enter only digits: ");
			while (getchar() != '\n');
			continue;
		}
		if (*number != 1 && *number != 2 && *number != 3
			&& *number != 4 && *number != 5 && *number != 6) {
			printf("\nIncorrect input. Choose one of points in menu: ");
			continue;
		}
		if (getchar() != '\n') {
			printf("\nIncorrect input. Enter only digits: ");
			while (getchar() != '\n');
			continue;
		}
		else {
			break;
		}
	}
	return;
}

int main()
{
	int check_exit = 0;
	Menu();
	MenuChoice(&check_exit);
	while (check_exit != 5) {
		switch (check_exit) {
		case 1: {
					SoundGeneration();
					break;
		}
		case 2: {
					printDelims();
					break;
		}
		case 3: {
					printStateWords();
					break;
		}
		case 4: {
					newrandom();
					break;			
		}
		}
		check_exit = 0;
		Menu();
		MenuChoice(&check_exit);
	}
	return 0;
}
